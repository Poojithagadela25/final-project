# -*- coding: utf-8 -*-
"""Software.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1R0i701QD5Mk1_HD0PM6a_PoW1ayuMj4e
"""

pip install beautifulsoup4

pip install requests

pip install fake_useragent

import requests
from bs4 import BeautifulSoup
import csv
from fake_useragent import UserAgent
import time
import random

# Sending request to the page
url = "https://www.scrapethissite.com/pages/forms/"
response = requests.get(url)
soup = BeautifulSoup(response.content, "html.parser")

soup

import pandas as pd

ua = UserAgent()

table = soup.find('table')
rows = table.find_all('tr')

data = []

# Looping through all rows
for row in rows[1:]:
    cols = row.find_all('td')
    cols = [col.text.strip() for col in cols]
    data.append(cols)

columns = ["Team Name", "Year", "Wins", "Losses", "OT Losses", "Win %", "Goals For (GF)", "Goals Against (GA)", "+ / -"]

df = pd.DataFrame(data, columns=columns)

df.to_csv('scraped_data.csv', index=False)
print("Data saved to 'scraped_data.csv'")

df = pd.read_csv('scraped_data.csv')
df.head()

df.isnull().sum()

# Removing duplicates
df.drop_duplicates(inplace=True)

# Standardising column names
df.columns = df.columns.str.strip().str.replace(' ', '_').str.lower()

# Checking invalid entries
df = df[df['wins'] >= 0]
df = df[df['losses'] >= 0]
df = df[df['goals_for_(gf)'] >= 0]
df = df[df['goals_against_(ga)'] >= 0]

df['year'] = df['year'].astype(int)

df.head()

df['ot_losses'].fillna(0, inplace=True)
df.head()

df.isnull().sum()

# Descriptive Statistics
stats = df.describe()

stats

# Aggregations
avg_wins_per_year = df.groupby('year')['wins'].mean()
avg_wins_per_year

# Filtering teams with Win % > 50%
df['win_percentage'] = df['wins'] / (df['wins'] + df['losses'])
high_win_teams = df[df['win_percentage'] > 0.5]
high_win_teams

import matplotlib.pyplot as plt
import seaborn as sns

numeric_columns = df.select_dtypes(include=['number']).columns

correlation = df[numeric_columns].corr()

plt.figure(figsize=(10, 8))
sns.heatmap(correlation, annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Correlation Matrix (Excluding Team Name)')
plt.show()

# K-means clustering
from sklearn.cluster import KMeans

X = df[['wins', 'goals_for_(gf)', 'goals_against_(ga)']]

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Applying KMeans clustering
kmeans = KMeans(n_clusters=3)
df['cluster'] = kmeans.fit_predict(X_scaled)

plt.figure(figsize=(8, 6))
sns.scatterplot(x='wins', y='goals_for_(gf)', hue='cluster', data=df, palette='Set1')
plt.title('Clustering of Teams')
plt.show()

# Line Plot
plt.figure(figsize=(10, 6))
sns.lineplot(x='year', y='wins', data=df, marker='o')
plt.title('Team Wins Over Time')
plt.xlabel('Year')
plt.ylabel('Wins')
plt.show()

df_melted = df.melt(id_vars=['team_name', 'year'], value_vars=['wins', 'losses'], var_name='Outcome', value_name='Games')

plt.figure(figsize=(12, 6))
sns.barplot(x='team_name', y='Games', hue='Outcome', data=df_melted, palette='Set2')
plt.xticks(rotation=90)

plt.title('Wins vs Losses by Team and Year')
plt.xlabel('Team Name')
plt.ylabel('Games')
plt.legend(title='Outcome')

plt.show()

df['win_percentage'] = df['wins'] / (df['wins'] + df['losses'])

plt.figure(figsize=(10, 6))
sns.histplot(df['win_percentage'], bins=10, kde=True, color='blue', stat='density', linewidth=0)
plt.title('Distribution of Win Percentages')
plt.xlabel('Win Percentage')
plt.ylabel('Density')
plt.show()

total_wins = df['wins'].sum()
total_losses = df['losses'].sum()

labels = ['Wins', 'Losses']
sizes = [total_wins, total_losses]
colors = ['#66b3ff', '#ff6666']

plt.figure(figsize=(8, 8))
plt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140, wedgeprops={'edgecolor': 'black'})
plt.title('Distribution of Wins vs Losses')
plt.axis('equal')
plt.show()

# Heatmap showing the relationship between multiple metrics
heatmap_data = df[['wins', 'goals_for_(gf)', 'goals_against_(ga)', 'win_percentage']]
plt.figure(figsize=(10, 6))
sns.heatmap(heatmap_data.corr(), annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Heatmap of Team Performance Metrics')
plt.show()